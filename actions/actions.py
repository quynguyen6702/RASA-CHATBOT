from typing import Text, List, Dict, Any
from rasa_sdk import Action, Tracker
from rasa_sdk.events import UserUtteranceReverted
from rasa_sdk.executor import CollectingDispatcher
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer
import  pandas as pd
import numpy as np
import heapq
import json


class ActionRating(Action):
    def name(self) -> Text:
        return "action_rating"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        df = pd.read_csv(filepath_or_buffer='/Users/DELL/RASA/Hotel_Travel/Model_Raking/hotel_raking.csv')
        corpus = list(df["district"])
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        accommodation_slot = tracker.get_slot("accommodation")
        district_slot = tracker.get_slot("district")
        if district_slot is not None and accommodation_slot is not None:
            key_vec = vectorizer.transform([district_slot])
            similarity_scores = cosine_similarity(X,key_vec)
            max_similarity_index = np.argmax(similarity_scores)
            keys = list(df["district"])
            point = keys[max_similarity_index]
            try:
                accommodation_rating = float(accommodation_slot)
                filtered_rows = df[(df["accommodation"] == accommodation_rating) & (df["district"] == point)]
                hotels = filtered_rows['name'].head(5).tolist()

                if len(hotels) > 0:
                    message = f"T√¥i c√≥ th·ªÉ g·ª£i √Ω cho b·∫°n v√†i kh√°ch s·∫°n {accommodation_rating} sao t·ªët nh·∫•t m√† t√¥i ki·∫øm ƒë∆∞·ª£c ·ªü khu v·ª±c {point} nh∆∞:\n" + "\n".join(f"üëâ {hotel}" for hotel in hotels)
                else:
                    message = f"Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n {accommodation_rating} sao ·ªü khu v·ª±c {point}."

                dispatcher.utter_message(text=message)

            except ValueError:
                message = "C√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i"
                dispatcher.utter_message(text=message)

        else:
            message = "Xin l·ªói, t√¥i kh√¥ng t√¨m ƒë∆∞·ª£c kh√°ch s·∫°n n√†o d·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n"
            dispatcher.utter_message(text=message)
        return []


class ActionPrice(Action):
    def name(self) -> Text:
        return "action_price_hotel"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        df = pd.read_csv(filepath_or_buffer='/Users/DELL/RASA/Hotel_Travel/Model_Raking/hotel_raking.csv')
        corpus = list(df["district"])
        
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        
        average_price_slot = tracker.get_slot("average_price")
        district_slot = tracker.get_slot("district")
        
        if district_slot is not None and average_price_slot is not None:
    
            key_vec = vectorizer.transform([district_slot])
            similarity_scores = cosine_similarity(X, key_vec)
            max_similarity_index = np.argmax(similarity_scores)
            point = corpus[max_similarity_index]
            
            try:
                average_price = int(average_price_slot.replace('.', ''))
                filtered_rows = df[(df["average_price"] <= average_price) & (df["district"] == point)]
                hotels = filtered_rows['name'].head(5).tolist()
                
                if len(hotels) > 0:
                    message = f"T√¥i c√≥ th·ªÉ g·ª£i √Ω cho b·∫°n v√†i kh√°ch s·∫°n v·ªõi gi√° t·∫ßm {average_price_slot} ƒë·ªìng t·ªët nh·∫•t m√† t√¥i ki·∫øm ƒë∆∞·ª£c ·ªü khu v·ª±c {point} nh∆∞:\n" + "\n".join(f"üëâ {hotel}" for hotel in hotels)
                else:
                    message = f"Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n v·ªõi gi√° t·∫ßm {average_price_slot} ƒë·ªìng ·ªü khu v·ª±c {point}."
                
                dispatcher.utter_message(text=message)
            
            except ValueError:
                message = "C√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i."
                dispatcher.utter_message(text=message)
        
        else:
            message = "Xin l·ªói, t√¥i kh√¥ng t√¨m ƒë∆∞·ª£c kh√°ch s·∫°n n√†o d·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n"
            dispatcher.utter_message(text=message)
        
        return []

class ActionAlloption(Action):
    def name(self) -> Text:
        return "action_all_option"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:     
        df = pd.read_csv(filepath_or_buffer='/Users/DELL/RASA/Hotel_Travel/Model_Raking/hotel_raking.csv')
        corpus = list(df["district"])
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        accommodation_slot = tracker.get_slot("accommodation")
        average_price_slot = tracker.get_slot("average_price")
        district_slot = tracker.get_slot("district")
        if district_slot is not None and average_price_slot is not None and accommodation_slot is not None:
            key_vec = vectorizer.transform([district_slot])
            similarity_scores = cosine_similarity(X,key_vec)
            max_similarity_index = np.argmax(similarity_scores)
            keys = list(df["district"])
            point = keys[max_similarity_index]
            try:
                accommodation_rating = float(accommodation_slot)
                average_price = int(average_price_slot.replace('.', ''))
                filtered_rows = df[(df["accommodation"] == accommodation_rating) & (df["average_price"] <= average_price) & (df["district"] == point)]
                hotels = filtered_rows['name'].head(5).tolist()
                if len(hotels) > 0:
                    message = f"T√¥i c√≥ th·ªÉ g·ª£i √Ω cho b·∫°n v√†i kh√°ch s·∫°n {accommodation_rating} sao v·ªõi gi√° t·∫ßm {average_price_slot} ƒë·ªìng t·ªët nh·∫•t m√† t√¥i ki·∫øm ƒë∆∞·ª£c ·ªü khu v·ª±c {point} nh∆∞:\n" + "\n".join(f"üëâ {hotel}" for hotel in hotels)
                else:
                    message = f"Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n {accommodation_rating} sao v·ªõi gi√° t·∫ßm {average_price_slot} ƒë·ªìng ·ªü khu v·ª±c {point}."
                dispatcher.utter_message(text=message)

            except ValueError:
                message = "C√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i"
                dispatcher.utter_message(text=message)

        else:
            message = "Xin l·ªói, t√¥i kh√¥ng t√¨m ƒë∆∞·ª£c kh√°ch s·∫°n n√†o d·ª±a tr√™n y√™u c·∫ßu c·ªßa b·∫°n"
            dispatcher.utter_message(text=message)
        return []

class ActionAddress(Action):
    def name(self) -> Text:
        return "action_name_hotel"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        df = pd.read_csv(filepath_or_buffer='/Users/DELL/RASA/Hotel_Travel/Model_Raking/hotel_raking.csv')
        corpus = list(df["name"])
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)

        hotel_slot = tracker.get_slot("name_hotel")
        
        if hotel_slot is not None:
            key_vec = vectorizer.transform([hotel_slot])
            similarity_scores = cosine_similarity(X, key_vec)
            max_similarity_index = np.argmax(similarity_scores)
            max_similarity_score = similarity_scores[max_similarity_index]
            
            if max_similarity_score >= 0.7: 
                point = df.iloc[max_similarity_index]["name"]
                hotels = df[df["name"] == point]

                address = ", ".join(hotels["address"].tolist())
                highlight = ", ".join(hotels["highlight"].tolist())
                formatted_number = ", ".join('{:,.0f}'.format(price) for price in hotels["average_price"].tolist())
                price = formatted_number.replace(',', '.')
                amenity = ", ".join(str(amenity) for amenity in hotels["amenity"].tolist())
                link = ", ".join(str(link) for link in hotels["link"].tolist())

                dispatcher.utter_message(text=f"D∆∞·ªõi ƒë√¢y l√† m·ªôt v√†i th√¥ng tin v·ªÅ {point}")
                message = "- ƒê·ªãa ch·ªâ: {}\n" \
                            "- ƒêi·ªÉm n·ªïi b·∫≠t: {}\n" \
                            "- Ti·ªán √≠ch: {}\n" \
                            "- Gi√° trung b√¨nh giao ƒë·ªông t·ª´: {} ƒë·ªìng\n" \
                            "- B·∫°n c√≥ th·ªÉ tham kh·∫£o ƒë·∫∑t ph√≤ng t·∫°i trang Expedia: {}\n"

                dispatcher.utter_message(text=message.format(address, highlight, amenity, price, link))
                dispatcher.utter_message(text="B·∫°n c√≥ mu·ªën bi·∫øt th√™m th√¥ng tin v·ªÅ c√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch, nh√† h√†ng, giao th√¥ng c√¥ng c·ªông g·∫ßn kh√°ch s·∫°n kh√¥ng? N·∫øu c√≥, h√£y nh·∫≠p theo c√∫ ph√°p sau.",
                                            buttons=[
                                                {"title": "ƒê·ªãa ƒëi·ªÉm tham quan", "payload": "/question_location_nearby"},
                                                {"title": "Nh√† h√†ng", "payload": "/question_restaurant_nearby"},
                                                {"title": "Giao th√¥ng c√¥ng c·ªông", "payload": "/question_around_nearby"}
                                            ])
            else:
                dispatcher.utter_message(text="Xin l·ªói, hi·ªán t·∫°i kh√°ch s·∫°n n√†y kh√¥ng c√≥ trong h·ªì s∆° c·ªßa t√¥i")
        else:
            dispatcher.utter_message(text="Xin l·ªói, vui l√≤ng nh·∫≠p l·∫°i")
        
        return []

class ActionLocationNearby(Action):
    def name(self) -> Text:
        return "action_location_nearby"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        df = pd.read_csv('/Users/DELL/RASA/Hotel_Travel/Model_Raking/hotel_raking.csv')
        df_location = pd.read_csv('/Users/DELL/RASA/Hotel_Travel/Clean/Expedia/Location_nearby_Hotel.csv')
        df_location_hotel = pd.merge(df, df_location, on='id', how='inner')
        corpus = list(df_location_hotel["name"])
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        hotel_slot = tracker.get_slot("name_hotel")
        if hotel_slot is not None:
            key_vec = vectorizer.transform([hotel_slot])
            similarity_scores = cosine_similarity(X, key_vec)

            if np.max(similarity_scores) < 0.7:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y t√™n kh√°ch s·∫°n ph√π h·ª£p.")
            else:
                max_similarity_index = np.argmax(similarity_scores)
                hotel_name = corpus[max_similarity_index]
                hotels = df_location_hotel[(df_location_hotel["name"] == hotel_name)]
                message_1 = f"C√°c ƒë·ªãa ƒëi·ªÉm g·∫ßn {hotel_name} g·ªìm:\n"
                dispatcher.utter_message(text=message_1)
                message_2 = ""
                for index, row in hotels.iterrows():
                    location = row['location_place']
                    distance = row['location_time']
                    message_2 += f"+ {location} - th·ªùi gian di chuy·ªÉn: {distance}\n"
                dispatcher.utter_message(text=message_2)
        else:
            dispatcher.utter_message(text="Xin l·ªói, hi·ªán t·∫°i kh√°ch s·∫°n n√†y kh√¥ng c√≥ trong h·ªì s∆° c·ªßa t√¥i")
        return []
    
class ActionRestaurantNearby(Action):
    def name(self) -> Text:
        return "action_restaurant_nearby"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        df = pd.read_csv('/Users/DELL/RASA/Hotel_Travel/Model_Raking/hotel_raking.csv')
        df_restaurant = pd.read_csv('/Users/DELL/RASA/Hotel_Travel/Clean/Expedia/Restaurant_nearby_Hotel.csv')
        df_restaurant_hotel = pd.merge(df, df_restaurant, on='id', how='inner')
        corpus = list(df_restaurant_hotel["name"])
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        hotel_slot = tracker.get_slot("name_hotel")
        if hotel_slot is not None:
            key_vec = vectorizer.transform([hotel_slot])
            similarity_scores = cosine_similarity(X, key_vec)

            if np.max(similarity_scores) < 0.7:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y t√™n kh√°ch s·∫°n ph√π h·ª£p.")
            else:
                max_similarity_index = np.argmax(similarity_scores)
                hotel_name = corpus[max_similarity_index]
                hotels = df_restaurant_hotel[(df_restaurant_hotel["name"] == hotel_name)]
                message_1 = f"C√°c nh√† h√†ng g·∫ßn {hotel_name} g·ªìm:\n"
                dispatcher.utter_message(text=message_1)
                message_2 = ""
                for index, row in hotels.iterrows():
                    restaurant = row['restaurant_place']
                    distance = row['restaurant_time']
                    message_2 += f"+ {restaurant} - th·ªùi gian di chuy·ªÉn: {distance}\n"
                dispatcher.utter_message(text=message_2)
        else:
            dispatcher.utter_message(text="Xin l·ªói, hi·ªán t·∫°i kh√°ch s·∫°n n√†y kh√¥ng c√≥ trong h·ªì s∆° c·ªßa t√¥i")
        return []

class ActionAroundNearby(Action):
    def name(self) -> Text:
        return "action_around_nearby"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        df = pd.read_csv('/Users/DELL/RASA/Hotel_Travel/Model_Raking/hotel_raking.csv')
        df_around = pd.read_csv('/Users/DELL/RASA/Hotel_Travel/Clean/Expedia/Around_nearby_Hotel.csv')
        df_around_hotel = pd.merge(df, df_around, on='id', how='inner')

        corpus = list(df_around_hotel["name"])
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        hotel_slot = tracker.get_slot("name_hotel")

        if hotel_slot is not None:
            key_vec = vectorizer.transform([hotel_slot])
            similarity_scores = cosine_similarity(X, key_vec)

            if np.max(similarity_scores) < 0.7:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y t√™n kh√°ch s·∫°n, vui l√≤ng nh·∫≠p l·∫°i")
            else:
                max_similarity_index = np.argmax(similarity_scores)
                hotel_name = corpus[max_similarity_index]
                hotels = df_around_hotel[(df_around_hotel["name"] == hotel_name)]
                message_1 = f"C√°c ƒëi·ªÉm giao th√¥ng c√¥ng c·ªông g·∫ßn {hotel_name} g·ªìm:\n"
                dispatcher.utter_message(text=message_1)
                message_2 = ""
                for index, row in hotels.iterrows():
                    around = row['around_place']
                    distance = row['around_time']
                    message_2 += f"+ {around} - th·ªùi gian di chuy·ªÉn: {distance}\n"
                dispatcher.utter_message(text=message_2)
        else:
            dispatcher.utter_message(text="Xin l·ªói, hi·ªán t·∫°i kh√°ch s·∫°n n√†y kh√¥ng c√≥ trong h·ªì s∆° c·ªßa t√¥i")
        return []

class ActionDijkstra(Action):
    def name(self) -> Text:
        return "action_dijkstra"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        path_hotel = '/Users/DELL/RASA/Hotel_Travel/Model_Tour/graph_hotel.json'
        path = '/Users/DELL/RASA/Hotel_Travel/Model_Tour/graph.json'

        with open(path_hotel, 'r') as file_hotel:
            graph_hotel = json.load(file_hotel)
        with open(path, 'r') as file:
            graph = json.load(file)

        corpus = list(graph.keys()) + list(graph_hotel.keys())
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        key = tracker.get_slot("name")
        num_waypoints = tracker.get_slot("num_waypoints")

        if key is not None and num_waypoints is not None and int(num_waypoints) < 50:
            key_vec = vectorizer.transform([key])
            similarity_scores = cosine_similarity(X, key_vec)

            if np.max(similarity_scores) < 0.7:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm ph√π h·ª£p.")
            else:
                max_similarity_index = np.argmax(similarity_scores)
                start = corpus[max_similarity_index]
                nearest_attraction = graph.get(start, graph_hotel.get(start))
                if nearest_attraction:
                    path = self.tour_model(graph, start, int(num_waypoints) - 1)
                    if path:
                        table_data = self.prepare_trip_info(path)
                        formatted_path = ' --> '.join(path)
                        dispatcher.utter_message(text=f"ƒê√¢y l√† l·ªô tr√¨nh di chuy·ªÉn t·ªëi ∆∞u t√¥i t√¨m ƒë∆∞·ª£c cho b·∫°n: {formatted_path}")
                        trip_details = self.generate_trip_details(table_data)
                        dispatcher.utter_message(text="M·ªôt s·ªë th√¥ng tin v·ªÅ l·ªô tr√¨nh di chuy·ªÉn:")
                        dispatcher.utter_message(text=trip_details)
                    else:
                        dispatcher.utter_message(text="Kh√¥ng th·ªÉ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi ph√π h·ª£p.")
                else:
                    dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm g·∫ßn nh·∫•t.")
        else:
            dispatcher.utter_message(text="M·ªôt s·ªë th√¥ng tin c·∫ßn thi·∫øt b·ªã thi·∫øu ho·∫∑c s·ªë ƒëi·ªÉm ƒë·∫øn v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng")
        return []


class ActionDijkstra(Action):
    def name(self) -> Text:
        return "action_dijkstra"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        # ƒê∆∞·ªùng d·∫´n t·ªõi file JSON
        path_hotel = '/Users/DELL/RASA/Hotel_Travel/Model_Tour/graph_hotel.json'
        path = '/Users/DELL/RASA/Hotel_Travel/Model_Tour/graph.json'

        # ƒê·ªçc n·ªôi dung t·ª´ file JSON ƒë·∫ßu ti√™n
        with open(path_hotel, 'r') as file_hotel:
            graph_hotel = json.load(file_hotel)
        
        # ƒê·ªçc n·ªôi dung t·ª´ file JSON th·ª© hai
        with open(path, 'r') as file:
            graph = json.load(file)
        # TF-IDF
        corpus = list(graph.keys()) + list(graph_hotel.keys())
        vectorizer = TfidfVectorizer()
        X = vectorizer.fit_transform(corpus)
        key = tracker.get_slot("name")
        num_waypoints = tracker.get_slot("num_waypoints")
        if key is not None and num_waypoints is not None and int(num_waypoints) < 50:
            key_vec = vectorizer.transform([key])
            similarity_scores = cosine_similarity(X,key_vec)
            if np.max(similarity_scores) < 0.7:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†y, vui l√≤ng nh·∫≠p l·∫°i")
            else: 
                max_similarity_index = np.argmax(similarity_scores)
                keys = list(graph.keys()) + list(graph_hotel.keys())
                start = keys[max_similarity_index]
                if start in graph_hotel:
                    nearest_attraction = graph_hotel.get(start)
                if start in graph:
                    nearest_attraction = start
                path = self.tour_model(graph, nearest_attraction, int(num_waypoints)-1)
                if path:
                    table_data = []
                    df = pd.read_csv(filepath_or_buffer='/Users/DELL/RASA/Hotel_Travel/Clean/Travel/clean_distance_travel.csv')
                    df_address = pd.read_csv(filepath_or_buffer='/Users/DELL/RASA/Hotel_Travel/Clean/Travel/clean_travel.csv')
                    for i in range(len(path)-1):
                        travel_point = path[i]
                        next_travel_point = path[i + 1]
                        matching_rows = df[(df['From'] == travel_point) & (df['To'] == next_travel_point)]
                    
                        if matching_rows.empty:
                            matching_rows = df[(df['From'] == next_travel_point) & (df['To'] == travel_point)]
                    
                        matching_time = matching_rows['Time'].values[0]
                        matching_distance = matching_rows['Distance'].values[0]
                        
                        table_data.append([travel_point, next_travel_point, matching_time, matching_distance])

                    for row in table_data:
                        distance = row[3]
                        if distance < 1:
                            row[3] = str(distance * 1000) + " m"
                        else:
                            row[3] = str(distance) + " km"
                    formatted_path = ' --> '.join(path)
                    dispatcher.utter_message(text=f"ƒê√¢y l√† l·ªô tr√¨nh di chuy·ªÉn t·ªëi ∆∞u t√¥i t√¨m ƒë∆∞·ª£c cho b·∫°n: {formatted_path}")
                    dispatcher.utter_message(text="M·ªôt s·ªë th√¥ng tin v·ªÅ l·ªô tr√¨nh di chuy·ªÉn:")
                    matching_rows_address = df_address[df_address['name_travel'].isin(path)]
                    all_locations_info = ""
                    for index, row in matching_rows_address.iterrows():
                        matching_name = row['name_travel']
                        matching_address = row['address_travel']

                        all_locations_info += f'üìç {matching_name} - V·ªã tr√≠: {matching_address}\n'
                
                    for data in table_data:
                        matching_travel_point = data[0]
                        matching_next_travel_point = data[1]
                        matching_time = data[2]
                        matching_distance = data[3]
                        all_locations_info += f"‚è© T·ª´ v·ªã tr√≠ {matching_travel_point} ƒë·∫øn {matching_next_travel_point} m·∫•t kho·∫£ng {matching_time} v√† qu√£ng ƒë∆∞·ªùng l√† {matching_distance}\n"
                    dispatcher.utter_message(text=all_locations_info)    
        else:
            dispatcher.utter_message(text="M·ªôt s·ªë th√¥ng tin c·∫ßn thi·∫øt b·ªã thi·∫øu ho·∫∑c s·ªë ƒëi·ªÉm ƒë·∫øn v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng")
        return []
    
    def tour_model(self, graph: Dict[str, Any], start: str, num_waypoints: int) -> List[str]:
        # Kh·ªüi t·∫°o kho·∫£ng c√°ch: v√¥ c√πng cho t·∫•t c·∫£ c√°c ƒë·ªânh tr·ª´ ƒë·ªânh b·∫Øt ƒë·∫ßu
        distances = {node: (float('inf'), []) for node in graph}
        distances[start] = (0, [start])

        # T·∫°o h√†ng ƒë·ª£i ∆∞u ti√™n v√† th√™m ƒë·ªânh b·∫Øt ƒë·∫ßu v√†o ƒë√≥ v·ªõi s·ªë ƒëi·ªÉm ƒë√£ thƒÉm l√† 0 v√† danh s√°ch ƒëi·ªÉm ƒë√£ thƒÉm l√† r·ªóng
        queue = [(0, start, 0, [start])]

        seen = {(start, 0)}  # T·∫°o m·ªôt set l∆∞u tr·ªØ c√°c c·∫∑p (node, waypoints_visited)

        # Th·ª±c hi·ªán thu·∫≠t to√°n Dijkstra
        while queue:
            current_distance, current_node, waypoints_visited, visited_waypoints = heapq.heappop(queue)

            # N·∫øu ƒë√£ thƒÉm ƒë·ªß s·ªë ƒëi·ªÉm tham quan theo y√™u c·∫ßu, th√¨ d·ª´ng l·∫°i
            if waypoints_visited == num_waypoints:  
                return visited_waypoints

            # X√©t c√°c ƒë·ªânh l√°ng gi·ªÅng
            for neighbor, weight in graph[current_node].items():
                # Ki·ªÉm tra xem ƒëi·ªÉm l√°ng gi·ªÅng n√†y ƒë√£ ƒë∆∞·ª£c thƒÉm ch∆∞a
                if neighbor not in visited_waypoints:
                    distance = current_distance + weight

                    # N·∫øu t√¨m th·∫•y ƒë∆∞·ªùng ng·∫Øn h∆°n ho·∫∑c ƒë·ªânh l√°ng gi·ªÅng ch∆∞a ƒë∆∞·ª£c thƒÉm
                    if (distance < distances[neighbor][0] or (neighbor, waypoints_visited + 1) not in seen):
                        distances[neighbor] = (distance, visited_waypoints + [neighbor])
                        heapq.heappush(queue, (distance, neighbor, waypoints_visited + 1, visited_waypoints + [neighbor]))
                        seen.add((neighbor, waypoints_visited + 1))  # Th√™m v√†o set seen ƒë·ªÉ kh√¥ng x·ª≠ l√Ω n√∫t ƒë√≥ n·ªØa

class ActionDefaultFallback(Action):

    def name(self) -> Text:
        return "action_default_fallback"

    async def run(
        self, 
        dispatcher: CollectingDispatcher, 
        tracker: Tracker, 
        domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:
        dispatcher.utter_message(template="utter_default_fallback")

        return [UserUtteranceReverted()]